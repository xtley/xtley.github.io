<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/25/hello-world/"/>
      <url>/2024/05/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>建站笔记</title>
      <link href="/2024/05/25/jian-zhan-bi-ji/"/>
      <url>/2024/05/25/jian-zhan-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>新建文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;建站笔记&quot;</span><br></pre></td></tr></table></figure><p>上传到github (上传有延迟 一两分钟左右)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>已经使用了hexo的插件进行远程推送，所以我们不需要在本地目录下面新建仓库的，最重要的文章本来就上传到了远程仓库，所以不需要担心丢失。</p><p>更换主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在博客文件目录下的theme中把要使的主题从clone下来，并且在到根目录下配置切换theme: 新主题名(与文件名一致)</span><br></pre></td></tr></table></figure><p>遇到报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: error: GH013: Repository rule violations found for refs/heads/main.</span><br></pre></td></tr></table></figure><p>报错原因上传的文件中泄露了key,解决方法到报错中给出的网站去允许上传</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>概率与期望dp</title>
      <link href="/2024/05/25/gai-lu-yu-qi-wang-dp1/"/>
      <url>/2024/05/25/gai-lu-yu-qi-wang-dp1/</url>
      
        <content type="html"><![CDATA[<h2 id="由一道题解决有后效性的dp问题有循环依赖的概率dp问题"><a class="markdownIt-Anchor" href="#由一道题解决有后效性的dp问题有循环依赖的概率dp问题"></a> 由一道题解决有后效性的dp问题/有循环依赖的概率dp问题</h2><p><a href="https://atcoder.jp/contests/abc333/tasks/abc333_f">https://atcoder.jp/contests/abc333/tasks/abc333_f</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">3001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inv2 = (MOD + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="function">LL <span class="title">mypow</span><span class="params">(LL x, LL y, <span class="type">int</span> mod = MOD)</span> </span>&#123;</span><br><span class="line">    x %= mod;</span><br><span class="line">    LL res = <span class="number">1</span> % mod;</span><br><span class="line">    <span class="keyword">while</span>(y) &#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mypow</span>(x, MOD - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// j = 1: dp[i][j] = dp[i][i] / 2</span></span><br><span class="line"><span class="comment">// j &gt; 1: dp[i][j] = (dp[i - 1][j - 1](会降为常数) + dp[i][j - 1](会降为dp[i][i])) / 2</span></span><br><span class="line">LL dp[MAX_N][MAX_N];</span><br><span class="line">LL a[MAX_N], b[MAX_N]; <span class="comment">// 所以假设：dp[i][j] = a[j](已知) * dp[i][i](变数) + b[j](已知); 待定系数式</span></span><br><span class="line"><span class="comment">// 对于每一个i值，我们共有i个式子(二元一次式)以及i个变数</span></span><br><span class="line"><span class="comment">// dp[i][j] = (dp[i - 1][j - 1](常数) + dp[i][j - 1])(变数，但是已经知道如何使用dp[i][i]表示)) / 2</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        a[<span class="number">1</span>] = inv2;</span><br><span class="line">        b[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            a[j] = a[j - <span class="number">1</span>] * inv2 % MOD;</span><br><span class="line">            b[j] = (b[j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) * inv2 % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dp[i][i] = a[i] * dp[i][i] + b[i]</span></span><br><span class="line">        dp[i][i] = b[i] * <span class="built_in">inv</span>((<span class="number">1</span> - a[i] + MOD) % MOD) % MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            dp[i][j] = (a[j] * dp[i][i] + b[j]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        cout &lt;&lt; dp[N][i] &lt;&lt; (i &lt; N ? <span class="string">&#x27; &#x27;</span> : <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 思考如何假设系数列出 dp[i][j] = a[j] * dp[i][i] + b[j] 的呢？这里我们发现使上面的dp</span></span><br><span class="line"><span class="comment">方程存在有后效性的关键在于dp[i][i]所以我们想办法每次的2-N的循环中首先要想办法将dp[i][i]求出，</span></span><br><span class="line"><span class="comment">然后再去求i情况下的所有dp式子。由于求dp[i][i]需要先求a[j],b[j]那么在这之前在先想办法求出求出a[j],b[j]的递推式。</span></span><br><span class="line"><span class="comment">由于在求 dp[i][j] 的时候dp[i-1][j-1]是已经算出来的，所以我们只需要把dp[i][j-1]使用假设出来的关于dp[i][j]待定系数的式子,</span></span><br><span class="line"><span class="comment">带入到dp[i][j]中求出dp[i][j]=a[j-1]/2*dp[i][i]+b[j-1]/2+dp[i-1][j-1]/2;对比可求出a[j],b[j]的递推式子。在将a[j],b[j]求出来以后由于</span></span><br><span class="line"><span class="comment">dp[i][i] = a[i] * dp[i][i] + b[i],这就已经可以把dp[i][i]求出来了，在利用dp[i][i]去求i时候的所有dp式子。</span></span><br><span class="line"><span class="comment">以上是使用待定系数法来解决这类问题，当dp式复杂时我们还可以使用高斯消元法来求解。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
