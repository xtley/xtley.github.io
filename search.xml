<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/25/hello-world/"/>
      <url>/2024/05/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>杜教筛</title>
      <link href="/2024/05/25/du-jiao-shai/"/>
      <url>/2024/05/25/du-jiao-shai/</url>
      
        <content type="html"><![CDATA[<h3 id="迪利克雷卷积"><a href="#迪利克雷卷积" class="headerlink" title="迪利克雷卷积"></a>迪利克雷卷积</h3><p>定义:$f(n),g(n)是两个积性函数$</p><script type="math/tex; mode=display">(f\otimes g)(n)=\sum_{d|n}f(d)·g(\frac{n}{d})=\sum_{d|n}f(\frac{n}{d})·g(d)</script><p>性质:</p><p>1.交换律：$f\otimes g=g\otimes f$</p><p>2.结合律：$(f\otimes g)\otimes h=f\otimes (g\otimes h)$</p><p>3.分配律：$(f+g)\otimes h=f\otimes h=g\otimes h$</p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p>1.元函数： $\xi(n)=[n=1]$</p><p>2.常数函数：$1(n)=1$</p><p>3.恒等函数：$id(n)=n$</p><p>4.欧拉函数：$\varphi(n)=\sum_{i=1}^{n}[gcd(i,n)=1]$</p><p>性质：$\sum_{d|n}{\varphi(d)}=n$</p><p>5.莫比乌斯函数：<br>$<br>\mu(n)=<br>\begin{cases}<br>1 \quad n=1\\<br>0 \quad n包含相同质因子\\<br>(-1)^s \quad n=p_1p_2…p_s \\<br>\end{cases}<br>$</p><p>性质：$\sum_{d|n}\mu(d)=[n=1]$</p><p>6.莫比乌斯函数与欧拉函数的联系：</p><script type="math/tex; mode=display">\sum_{d|n}\mu(d)\frac{n}{d}=\varphi(n)</script><h3 id="常用卷积关系"><a href="#常用卷积关系" class="headerlink" title="常用卷积关系"></a>常用卷积关系</h3><p>1.$\sum_{d|n}\mu(d)=[n=1] \quad \Longleftrightarrow \quad u\otimes 1=\xi$</p><p>2.$\sum_{d|n}\varphi(d)=n \quad \Longleftrightarrow \quad \varphi\otimes 1=id$</p><p>3.$\sum_{d|n}\mu(d)·\frac{n}{d}=n \quad \Longleftrightarrow \quad u\otimes id=\varphi$</p><p>4.$f\otimes \xi=f$</p><p>5.$f\otimes 1\not=f$</p><p>6.$f\otimes u\otimes 1=f$</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>$(\mu\otimes 1)(n)=\sum_{d|n}\mu(d)·1(\frac{n}{d})=\sum_{d|n}\mu(d)=[n=1]=\xi(n)$</p><p>$(\varphi\otimes 1)(n)=\sum_{d|n}\varphi(d)·1(\frac{n}{d})=\sum_{d|n}\varphi(d)=[n=1]=id(n)$</p><p>$(\mu\otimes id)(n)=\sum_{d|n}\mu(d)·id(\frac{n}{d})=\sum_{d|n}\mu(d)·\frac{n}{d}=\varphi(n)$</p><p>$(f\otimes \xi)(n)=\sum_{d|n}f(d)·\xi(\frac{n}{d})=\sum_{d|n}f(d)·[\frac{n}{d}=1]=f(n)$</p><p>$(f\otimes 1)(n)=\sum_{d|n}f(d)·1(\frac{n}{d})=\sum_{d|n}f(d)$</p><p>$(f\otimes u\otimes 1)(n)=(f\otimes (u\otimes 1)(n))(n)=(f\otimes \xi)(n)=f(n)$</p><h3 id="杜教筛原理"><a href="#杜教筛原理" class="headerlink" title="杜教筛原理"></a>杜教筛原理</h3><p>用途：在低于线性时间里，高效率求一些积性函数的前缀和</p><p>原理：整除分块+迪利克雷卷积+线性筛</p><p>公式:</p><script type="math/tex; mode=display">g(1)S(n)=\sum_{i=1}^n{(f\otimes g)(i)}-\sum_{i=2}^n{g(i)S(\lfloor{\frac {n}{i}\rfloor})}</script><p>推导:$\sum_{i=1}^n(f\otimes g)(i)$</p><p>$=\sum_{i=1}^{n}\sum_{d|i}f(\frac{i}{d})g(d)=\sum_{i=1}^n\sum_{d=1}^n[d|i]f(\frac{i}{d})g(d)$</p><p>$=\sum_{d=1}^{n}\sum_{i=1}^{n}[d|i]f(\frac{i}{d})g(d)=\sum_{d=1}^{n}\sum_{id=1}^n[d|id]f(\frac{id}{d})g(d)$</p><p>$=\sum_{d=1}^{n}\sum_{i=1}^{\frac{n}{d}}f(i)g(d)=\sum_{d=1}^{n}g(d)S(\frac{n}{d})$<br>$=g(1)S(n)+\sum_{d=2}^{n}g(d)S(\frac{n}{d})$</p><p>具体做法：</p><p>$1. \quad 使用线性筛预处理出n较小时的s(n)来剪枝$</p><p>$2. \quad 使用哈希表来做记忆化剪枝$</p><p>$3. \quad 使用整除分块做递归$</p><p>时间复杂度：$O(n^\frac {2}{3})$</p><h3 id="杜教筛模板"><a href="#杜教筛模板" class="headerlink" title="杜教筛模板"></a>杜教筛模板</h3><p>以该题为例:</p><script type="math/tex; mode=display">求s(n)=\sum_{i=1}^{n}\varphi(i)</script><p>解:<br>因为<br>$\varphi\otimes 1=id,所以f=\varphi,g=1,f\otimes g=id$</p><p>$s(n)=\sum_{i=1}^{n}id(i)-\sum_{i=2}^{n}1(d)s(\frac{n}{i})$</p><p>$=\sum_{i=1}^{n}i-\sum_{i=2}^{n}s({\frac{n}{i}})=\frac{n(n+1)}{2}-\sum_{i=1}^{n}s(\frac{n}{i})$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 线性筛所需</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span> pri<span class="token punctuation">;</span><span class="token comment">// 所需处理的函数</span>ll mu<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>phi<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span>ll<span class="token operator">></span> mp_phi<span class="token punctuation">;</span><span class="token comment">// 线性筛初始化</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// n=1时的函数取值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pri<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//处理n为素数时的函数取值</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">1ll</span>\otimes i\otimes pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            vis<span class="token punctuation">[</span>i\otimes pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                phi<span class="token punctuation">[</span>i\otimes pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\otimes pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                phi<span class="token punctuation">[</span>i\otimes pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\<span class="token function">otimes</span> <span class="token punctuation">(</span>pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>phi<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">Sphi</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span>N<span class="token punctuation">)</span> <span class="token keyword">return</span> phi<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mp_phi<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mp_phi<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    ll ans<span class="token operator">=</span>n\<span class="token function">otimes</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll l<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>r<span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>l<span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        r<span class="token operator">=</span>n<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">-=</span><span class="token function">Sphi</span><span class="token punctuation">(</span>n<span class="token operator">/</span>l<span class="token punctuation">)</span>\<span class="token function">otimes</span> <span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mp_phi<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 算法竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站笔记</title>
      <link href="/2024/05/25/jian-zhan-bi-ji/"/>
      <url>/2024/05/25/jian-zhan-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>新建文章<br><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;建站笔记&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>上传到github (上传有延迟 一两分钟左右)<br><pre class="line-numbers language-none"><code class="language-none">hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>已经使用了hexo的插件进行远程推送，所以我们不需要在本地目录下面新建仓库的，最重要的文章本来就上传到了远程仓库，所以不需要担心丢失。</p><p>更换主题<br><pre class="line-numbers language-none"><code class="language-none">在博客文件目录下的theme中把要使的主题从clone下来，并且在到根目录下配置切换theme: 新主题名(与文件名一致)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>遇到报错<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">remote: error: GH013: Repository rule violations found <span class="token keyword">for</span> refs/heads/main.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>报错原因上传的文件中泄露了key,解决方法到报错中给出的网站去允许上传</p><p>代码块的问题：不要使用 hexo g 直接使用 hexo clean和hexo server 或 hexo d</p><p>代码选择问题：参考<a href="https://github.com/blinkfox/hexo-theme-matery/issues/919#issuecomment-2099749708">https://github.com/blinkfox/hexo-theme-matery/issues/919#issuecomment-2099749708</a><br><pre class="line-numbers language-none"><code class="language-none">prism.css 中的替换成pre[class*&#x3D;language-].line-numbers&gt;code&#123;position:sticky;white-space:inherit&#125;.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>使用hexo-asset-image插件<br>然后找到 /node_modules/hexo-asset-image/index.js 这个文件，将它的内容替换为如下内容<br><pre class="line-numbers language-none"><code class="language-none">&#39;use strict&#39;;var cheerio &#x3D; require(&#39;cheerio&#39;);     &#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123;  return str.split(m, i).join(m).length;&#125;     var version &#x3D; String(hexo.version).split(&#39;.&#39;);hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;  var config &#x3D; hexo.config;  if(config.post_asset_folder)&#123;       var link &#x3D; data.permalink;   if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)      var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;   else      var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;   &#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.   var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;    link &#x3D; link.substring(beginPos, endPos);         var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;      var key &#x3D; toprocess[i];            var $ &#x3D; cheerio.load(data[key], &#123;        ignoreWhitespace: false,        xmlMode: false,        lowerCaseTags: false,        decodeEntities: false      &#125;);           $(&#39;img&#39;).each(function()&#123;       if ($(this).attr(&#39;src&#39;))&#123;           &#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.           var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);           if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;              !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;             &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.             &#x2F;&#x2F; In addition, to support multi-level local directory.             var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;               return elem !&#x3D; &#39;&#39;;             &#125;);             var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;               return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;             &#125;);             if(srcArray.length &gt; 1)               srcArray.shift();             src &#x3D; srcArray.join(&#39;&#x2F;&#39;);             $(this).attr(&#39;src&#39;, config.root + link + src);             console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);           &#125;       &#125;else&#123;           console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);           console.info&amp;&amp;console.info($(this));       &#125;      &#125;);      data[key] &#x3D; $.html();    &#125;  &#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>这样在插入图片的时候直接使用本地路径，网络上也可以看到了<br>或使用hexo-asset-img插件来插入图片</p><p>git push到远程仓库<br>or create a new repository on the command line<br><pre class="line-numbers language-none"><code class="language-none">echo &quot;# blog&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git branch -M maingit remote add origin git@github.com:xtley&#x2F;blog.gitgit push -u origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>or push an existing repository from the command line<br><pre class="line-numbers language-none"><code class="language-none">git remote add origin git@github.com:xtley&#x2F;blog.gitgit branch -M maingit push -u origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>概率与期望dp</title>
      <link href="/2024/05/25/gai-lu-yu-qi-wang-dp/"/>
      <url>/2024/05/25/gai-lu-yu-qi-wang-dp/</url>
      
        <content type="html"><![CDATA[<h2 id="由一道题解决有后效性的dp问题-有循环依赖的概率dp问题"><a href="#由一道题解决有后效性的dp问题-有循环依赖的概率dp问题" class="headerlink" title="由一道题解决有后效性的dp问题/有循环依赖的概率dp问题"></a>由一道题解决有后效性的dp问题/有循环依赖的概率dp问题</h2><p><a href="https://atcoder.jp/contests/abc333/tasks/abc333_f">https://atcoder.jp/contests/abc333/tasks/abc333_f</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> LL <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_N <span class="token operator">=</span> <span class="token number">3001</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inv2 <span class="token operator">=</span> <span class="token punctuation">(</span>MOD <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>LL <span class="token function">mypow</span><span class="token punctuation">(</span>LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">,</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> MOD<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">%=</span> mod<span class="token punctuation">;</span>    LL res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> x <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        y <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> x <span class="token operator">*</span> x <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LL <span class="token function">inv</span><span class="token punctuation">(</span>LL x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">mypow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> MOD <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// j = 1: dp[i][j] = dp[i][i] / 2</span><span class="token comment">// j > 1: dp[i][j] = (dp[i - 1][j - 1](会降为常数) + dp[i][j - 1](会降为dp[i][i])) / 2</span>LL dp<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span>LL a<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 所以假设：dp[i][j] = a[j](已知) * dp[i][i](变数) + b[j](已知); 待定系数式</span><span class="token comment">// 对于每一个i值，我们共有i个式子(二元一次式)以及i个变数</span><span class="token comment">// dp[i][j] = (dp[i - 1][j - 1](常数) + dp[i][j - 1])(变数，但是已经知道如何使用dp[i][i]表示)) / 2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> inv2<span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> inv2 <span class="token operator">%</span> MOD<span class="token punctuation">;</span>            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> inv2 <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// dp[i][i] = a[i] * dp[i][i] + b[i]</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">inv</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> MOD<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> N <span class="token operator">?</span> <span class="token char">' '</span> <span class="token operator">:</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 思考如何假设系数列出 dp[i][j] = a[j] * dp[i][i] + b[j] 的呢？这里我们发现使上面的dp方程存在有后效性的关键在于dp[i][i]所以我们想办法每次的2-N的循环中首先要想办法将dp[i][i]求出，然后再去求i情况下的所有dp式子。由于求dp[i][i]需要先求a[j],b[j]那么在这之前在先想办法求出求出a[j],b[j]的递推式。由于在求 dp[i][j] 的时候dp[i-1][j-1]是已经算出来的，所以我们只需要把dp[i][j-1]使用假设出来的关于dp[i][j]待定系数的式子,带入到dp[i][j]中求出dp[i][j]=a[j-1]/2*dp[i][i]+b[j-1]/2+dp[i-1][j-1]/2;对比可求出a[j],b[j]的递推式子。在将a[j],b[j]求出来以后由于dp[i][i] = a[i] * dp[i][i] + b[i],这就已经可以把dp[i][i]求出来了，在利用dp[i][i]去求i时候的所有dp式子。以上是使用待定系数法来解决这类问题，当dp式复杂时我们还可以使用高斯消元法来求解。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
